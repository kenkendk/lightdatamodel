		public class %CLASSNAME%Collection : System.Collections.ICollection, System.Collections.IEnumerable
		{
			private System.Collections.ArrayList m_baseList = new System.Collections.ArrayList();

			public virtual int Add(%CLASSNAME% item)
			{
				return m_baseList.Add(item);
			}

			public virtual void AddRange(System.Collections.ICollection items)
			{
				foreach(object o in items)
					if (o != null && o as %CLASSNAME% == null)
						throw new System.Exception("Only objects of type '" + typeof(%CLASSNAME%).FullName + "' may be inserted");
				m_baseList.AddRange(items);
			}

			public virtual bool Contains(%CLASSNAME% item)
			{
				return m_baseList.Contains(item);
			}

			public virtual void CopyTo(System.Array destination)
			{
				m_baseList.CopyTo(destination);
			}

			public virtual void CopyTo(System.Array destination, int index)
			{
				m_baseList.CopyTo(destination, index);
			}

			public virtual void CopyTo(int sourceindex, System.Array destination, int destinationindex, int count)
			{
				m_baseList.CopyTo(sourceindex, destination, destinationindex, count);
			}

			public virtual int Count { get { return m_baseList.Count; } }

			public virtual System.Collections.IEnumerator GetEnumerator()
			{
				return m_baseList.GetEnumerator();
			}

			public virtual System.Collections.IEnumerator GetEnumerator(int index, int count)
			{
				return m_baseList.GetEnumerator(index, count);
			}

			public virtual %CLASSNAME%Collection GetRange(int index, int count)
			{
				%CLASSNAME%Collection c = new %CLASSNAME%Collection();
				c.AddRange(m_baseList.GetRange(index, count));
				return c;
			}


			public virtual int IndexOf(%CLASSNAME% item)
			{
				return m_baseList.IndexOf(item);
			}

			public virtual int IndexOf(%CLASSNAME% item, int startIndex)
			{
				return m_baseList.IndexOf(item, startIndex);
			}
			
			public virtual int IndexOf(%CLASSNAME% item, int startIndex, int count)
			{
				return m_baseList.IndexOf(item, startIndex, count);
			}
			
			public virtual void Insert(int index, %CLASSNAME% item)
			{
				m_baseList.Insert(index, item);
			}

			public virtual void InsertRange(int index, System.Collections.ICollection items)
			{
				foreach(object o in items)
					if (o != null && o as %CLASSNAME% == null)
						throw new System.Exception("Only objects of type '" + typeof(%CLASSNAME%).FullName + "' may be inserted");
				m_baseList.InsertRange(index, items);
			}

			public virtual bool IsFixedSize { get { return m_baseList.IsFixedSize; } }
			public virtual bool IsReadOnly { get { return m_baseList.IsReadOnly; } }
			public virtual bool IsSynchronized { get { return m_baseList.IsSynchronized; } }

			public virtual int LastIndexOf(%CLASSNAME% item)
			{
				return m_baseList.LastIndexOf(item);
			}

			public virtual int LastIndexOf(%CLASSNAME% item, int startIndex)
			{
				return m_baseList.LastIndexOf(item, startIndex);
			}
			
			public virtual int LastIndexOf(%CLASSNAME% item, int startIndex, int count)
			{
				return m_baseList.LastIndexOf(item, startIndex, count);
			}

			public virtual void Remove(%CLASSNAME% item)
			{
				m_baseList.Remove(item);
			}

			public virtual void RemoveAt(int index)
			{
				m_baseList.RemoveAt(index);
			}

			public virtual void RemoveRange(int index, int count)
			{
				m_baseList.RemoveRange(index, count);
			}

			public virtual void Reverse(int index, int count)
			{
				m_baseList.Reverse(index, count);
			}

			public virtual void Reverse()
			{
				m_baseList.Reverse();
			}

			public virtual void SetRange(int index, System.Collections.ICollection items)
			{
				foreach(object o in items)
					if (o != null && o as %CLASSNAME% == null)
						throw new System.Exception("Only objects of type '" + typeof(%CLASSNAME%).FullName + "' may be inserted");
				m_baseList.SetRange(index, items);
			}

			public virtual void Sort(int index, int count, System.Collections.IComparer comparer)
			{
				m_baseList.Sort(index, count, comparer);
			}

			public virtual void Sort(System.Collections.IComparer comparer)
			{
				m_baseList.Sort(comparer);
			}

			public virtual void Sort()
			{
				m_baseList.Sort();
			}

			public virtual object SyncRoot { get { return m_baseList.SyncRoot; } }

			public virtual %CLASSNAME%[] ToArray()
			{
				return (%CLASSNAME%[])m_baseList.ToArray(typeof(%CLASSNAME%));
			}

			public virtual void TrimToSize()
			{
				m_baseList.TrimToSize();
			}
		}
