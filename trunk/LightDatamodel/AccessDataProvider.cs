#region Disclaimer / License
// Copyright (C) 2008, Kenneth Skovhede
// http://www.hexad.dk, opensource@hexad.dk
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
// 
#endregion
using System;
using System.Data;
using System.Data.OleDb;
using System.Data.LightDatamodel;
using System.Collections;

namespace System.Data.LightDatamodel
{
	public class AccessDataProvider : GenericDataProvider
	{
		Stack m_transactions = new Stack();
		
		public AccessDataProvider(string connectionstring)
		{
			m_connection = new OleDb.OleDbConnection(connectionstring);
		}

		public AccessDataProvider() : this("")
		{
		}

		public override string GetPrimaryKey(string tablename)
		{
			if(m_connection.State != ConnectionState.Open) m_connection.Open();
			DataTable primsch = ((OleDb.OleDbConnection)m_connection).GetOleDbSchemaTable(OleDbSchemaGuid.Primary_Keys, new Object[] {null, null, tablename});
			if( primsch == null || primsch.Rows.Count == 0) return "";
			return primsch.Rows[0].ItemArray[3].ToString();
		}

		public override string[] GetTablenames()
		{
			if(m_connection.State != ConnectionState.Open) m_connection.Open();
			DataTable tablesschema = ((OleDb.OleDbConnection)m_connection).GetOleDbSchemaTable(OleDbSchemaGuid.Tables, new object[] {null, null, null, "TABLE"});
			string[] tablenames = new string[tablesschema.Rows.Count];
			for(int i = 0; i< tablenames.Length; i++)
				tablenames[i] = tablesschema.Rows[i][2].ToString();
			return tablenames;
		}

		public override string QuoteColumnname(string columnname)
		{
			return "[" + columnname + "]";
		}

		public override string QuoteTablename(string tablename)
		{
			return "[" + tablename + "]";
		}

		public override void BeginTransaction(Guid id)
		{
			if (m_transactions.Count == 5)
				throw new Exception("Access databases have a limit of 5 nested transactions");

			IDbCommand cmd = m_connection.CreateCommand();
			cmd.CommandText = "BEGIN TRANSACTION";
			cmd.ExecuteNonQuery();
			m_transactions.Push(id);
		}

		public override void CommitTransaction(Guid id)
		{
			if (m_transactions.Count == 0)
				throw new Exception("There were no active transactions");
			if (((Guid)m_transactions.Peek()) != id)
				throw new Exception("Nested transactions must be commited or rolled back in the same order they were created");

			IDbCommand cmd = m_connection.CreateCommand();
			cmd.CommandText = "COMMIT TRANSACTION";
			cmd.ExecuteNonQuery();
			m_transactions.Pop();
		}

		public override void RollbackTransaction(Guid id)
		{
			if (m_transactions.Count == 0)
				throw new Exception("There were no active transactions");
			if (((Guid)m_transactions.Peek()) != id)
				throw new Exception("Nested transactions must be commited or rolled back in the same order they were created");

			IDbCommand cmd = m_connection.CreateCommand();
			cmd.CommandText = "ROLLBACK TRANSACTION";
			cmd.ExecuteNonQuery();
			m_transactions.Pop();
		}

		public override string GetLastAutogeneratedValue(string tablename)
		{
			return "SELECT @@IDENTITY";
		}




	}
}
