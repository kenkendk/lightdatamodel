using System;
using System.Collections;

namespace System.Data.LightDatamodel
{
	/// <summary>
	/// Summary description for SQLiteDataProvider.
	/// </summary>
	public class SQLiteDataProvider : GenericDataProvider
	{
		public SQLiteDataProvider(IDbConnection cmd)
		{
			m_connection = cmd;
		}

		public override string GetPrimaryKey(string tablename)
		{
			if(m_connection.State != ConnectionState.Open) m_connection.Open();
			IDbCommand cmd = m_connection.CreateCommand();
			cmd.CommandText = "SELECT Name FROM SQLITE_MASTER WHERE name=" + AddParameter(cmd, tablename) + " AND type='table'";
			IDataReader rd = cmd.ExecuteReader();
			if (!rd.Read())
				throw new Exception("Failed to read SQL from SQLITE_MASTER for table " + tablename);
			string sql = rd.GetValue(0).ToString();

			//TODO: How do we read the primary key, in case we don't use Autonumbers?
			//Do we parse the "create" sql?
			return "OID";
		}

		public override string[] GetTablenames()
		{
			if(m_connection.State != ConnectionState.Open) m_connection.Open();
			IDbCommand cmd = m_connection.CreateCommand();
			cmd.CommandText = "SELECT Name FROM SQLITE_MASTER WHERE type='table' AND name NOT LIKE 'sqlite_%'";
			IDataReader rd = cmd.ExecuteReader();
			ArrayList tb = new ArrayList();
			while(rd.Read())
				tb.Add(rd.GetValue(0).ToString());
			return (string[])tb.ToArray(typeof(string));
		}

		public override string QuoteColumnname(string columnname)
		{
			return "\"" + columnname.Replace("\"", "\\\"") + "\"";
		}

		public override string QuoteTablename(string tablename)
		{
			//TODO: Is this the correct way to escape the table names?
			return "\"" + tablename.Replace("\"", "\\\"") + "\"";
		}

		public override void BeginTransaction(Guid id)
		{
			IDbCommand cmd = m_connection.CreateCommand();
			cmd.CommandText = "BEGIN TRANSACTION '" + id.ToString() + "'";
			cmd.ExecuteNonQuery();
		}

		public override void CommitTransaction(Guid id)
		{
			IDbCommand cmd = m_connection.CreateCommand();
			cmd.CommandText = "COMMIT TRANSACTION '" + id.ToString() + "'";
			cmd.ExecuteNonQuery();
		}

		public override void RollbackTransaction(Guid id)
		{
			IDbCommand cmd = m_connection.CreateCommand();
			cmd.CommandText = "ROLLBACK TRANSACTION '" + id.ToString() + "'";
			cmd.ExecuteNonQuery();
		}

		public override string GetLastAutogeneratedValue(string tablename)
		{
			return "SELECT last_insert_rowid()";
		}


	}
}
